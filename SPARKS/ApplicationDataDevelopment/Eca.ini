
######################################################################
# Configuración de PSISBAN                                           #
######################################################################


# Las rutas de ficheros deben ser con slashes tipo unix ('/'), y la raíz virtual será el directorio de datos de la
# aplicación, definido en la variable de entorno PSISBAN_APPLICATION_DATA.


AudioVideoConfig: {
	IsLocal = TRUE;
	IsFullScreen = FALSE;
	WindowHasBorder = TRUE;
	WindowTitle = "ECA Engine";

	// Deprecates Local/Remote versions of width, height.
	Width = 768;
	Height = 550;

	Local: {
		 Width = 768;
		 Height = 550;
		
		WindowPositionX = 20; 
		WindowPositionY = 40; 
		
		Capture: {
			Enabled = TRUE;
			DeviceIndex = 0; 		/* Query ShowVideoSources */
			VideoModeIndex = 1;	/* Query ShowVideoSources */
		};
	};	

	Remote: {
		WebcamStream: {
			//URL = "c:\\toystory3.flv";
			 //URL = "rtmp://localhost/oflaDemo/webuserStream live=1";
	   		 //URL = "rtmp://192.168.1.97/Red5Fiona/webuserStream live=1";
			//URL = "rtmp://192.168.1.107/oflaDemo/webuserStream live=1";
			URL = "rtmp://195.55.126.110:80/Red5Fiona/webuserStream live=1";
		};
		AvatarStream: {
			Format = "flv";
			//AudioSampleRate = 11025;			/* FLV sólo soporta estas: 44100, 22050, 11025 */
			AudioSampleRate = 11025 ;
			CodecVideoBitRate = 1000000;	/* Video bitrate. Bitrates menores fuerzan mayor compresión y peor calidad */
			//CodecAudioBitRate = 64000;		/* Audio bitrate. */
			CodecAudioBitRate =64000;
			AudioPacketSize = 576;				/* Codec audio packet size in samples, not bytes */
			

			//URL = "rtmp://192.168.1.97/Red5Fiona/avatarStream live=1";
			//URL = "rtmp://192.168.1.107/oflaDemo/avatarStream live=1";
 			URL = "rtmp://195.55.126.110:80/Red5Fiona/avatarStream live=1";
			//URL = "rtmp://195.55.126.110/Red5Fiona/avatarStream live=1";		
			//URL = "c:\\out.flv";
			//URL = "/home/adele/Escritorio/audio_flite.avi";
		};
	};	
};

Scene: 
{
	CommonContentPath = "/Scene/Common";

	# BodyConfig = "/Scene/V4/v4.ini";
  # BodyConfig = "/Scene/Corporativo/Corporativo.ini";
	# BodyConfig = "/Scene/mujaAnimacion/mujaAnimacion.ini";
	# BodyConfig = "/Scene/Enfermera/enfermera.ini";
	
	# BodyConfig = "/Scene/theGirl/theGirl-anim.ini";
	BodyConfig = "/Scene/theGirl/theGirl-face.ini";
	

/*** 
	- la forward pipeline no funciona renderizando a mapa de bits para streaming
	- MSAA: multisample anti-aliasing usado en motor 3d
	- MSAA requiere extension EXT_framebuffer_multisample 
	- The RenderTarget element used in Pipeline resources has an attribute maxSamples which defines the maximum number 
	of samples used for MSAA (no figura por defecto en deferred.pipeline.xml)
***/
	
	// PipelineXML = "pipelines/deferred.pipeline.xml";
	# PipelineXML = "pipelines/forward.pipeline.xml";
	PipelineXML = "pipelines/forward.pipeline.with.msaa.xml";
	LightMaterial = "materials/light.material.xml";

	AntialisingSampleCount = 2; /* valores 0 = off, 2, 4, 8, 16 */
};


TTS:
{
	ConfigFile = "/Loquendo/tts.ini";
	Text = "hello, this is an example speech very long, I am testing my voice and I think this is going to crash, or not, who knows? do you know what I am talking about?";
	Voice = "Leonor";
	#Voice = "Jorge";
	
	Speed = 65;
	
	# Parametros del algoritmo de sincronización labial
	apexHeight = 60;
	slewRate = 2;
};


ASR:
{
	# Fichero de configuración de ASR 
	
	SessionFile = "/Loquendo/LoqASRexamples.session";
	
	
	# Maximum elapsed time that the recognizer can wait before voice is detected in the audio input
	# Milisegundos. -1 Desactiva el temporizador.

	SilenceTimeout = 8000;
	

	# Maximum speech length that can be triggered and recognized
	# Milisegundos. -1 Desactiva el temporizador.

	SpeechTimeout = 8000;
};


FaceTracker: {
	# Queue size in video frames
	FrameQueueSize = 4;	/* desbordamiento vs. latencia */

	HaarClassifierDataFile = "/Vision/haarcascade_frontalface_alt2.xml";
	
	ShowWindow = FALSE;

	# Si se detectan varias caras durante un tiempo, el algoritmo cambia el foco de atención cada tantos frames.
	FramesPerFace = 30;
};

ComputerVision: {

	FaceDetection: {
		#Cascade classifier for face detection
		classifierClassifierFilePath = "/Vision/haarcascade_frontalface_alt.xml";
	
		#Face detection paramters
		minFeatureSize: {
			width = 40;
			height = 40;
		};
		searchScaleFactor = 1.2;
		minNeighbors = 2;	
	};
	
	FaceRecognition : {
		
		#Size of the training set (number of persons).
		trainSetSize = 2000;
	
		#Number of face images for each person in the training set
		facesPerPerson = 30;
		
		#Face width in pixels for the images in the training set.
		faceWidth = 120;
	
		#Face height in pixels for the images in the training set.
		faceHeight = 90;
		
		#Number of components retained by PCA
		pcaComponents = 20;
		
		#Cascade classifier for detecting the faces in the image in order to make all image processing needed for recognition.
		classifierClassifierFilePath = "/Vision/haarcascade_frontalface_alt.xml";
	
		#File path to an opencv persistence file. (For training data)
		persistenceTrainFilePath = "/Vision/trainingPersistence.yaml";
	
		#File path to an opencv persistence file. (For recognition data)
		persistenceRecognitionFilePath = "/Vision/recognitionPersistence.yaml";
	};
	
};





Dialog: {

	# Leer el primero de los prompts y morir.
	DieAfterFirstPrompt = FALSE;

	# Habilitar que el usuario pueda interrumpir los prompts del sistema con respuestas anticipadas.
	HasBargeIn = FALSE;
	
	# Si IsStandAlone == FALSE, habilitar que el sistema intercale mensajes cuando la aplicación que se integra con 
	# el avatar solicita un cambio de estado. Los mensajes dependen del estado al que se solicita transitar.

	HasInterruptionPrompts = TRUE;
	

	// Stand alone
	// DialogSCXML = "/Dialogo/Demolab/DialogoDemolab.scxml";
	// GrammarFile = "/Dialogo/Demolab/Grammar/session.gram";
	
	// UserCMS
	DialogSCXML = "/Dialogo/Demolab/DialogoDemolab.scxml";
	GrammarFile = "/Dialogo/UserCMS/userCMS.gram";

	InterruptionsFile = "/Dialogo/Demolab/Interruptions.txt";
	
	/* 
	 * Events sent declaratively inside the SCXML dialog statechart definition
	 * vía sentences of the kind send targettype="c++" target="MyTest" event="ping"
	 *
 	 */

	EventConfig: {
		Target = "Corporativo-target";
		Events: {
			GrabCameraEventId = "grab-camara";
			ReleaseCameraEventId = "release-camara";
		};
	};
}; 


Integracion: {

	# emisión/recepción desde el punto de vista de PSISBAN.
	StateReceptionPort = 7777;
	StateEmisionPort = 7778;
	
	RemoteIpAddress = "127.0.0.1";
};


IsTeleoperated = FALSE;

WebappTransitionEngineURL = "http://192.168.4.56:9090/AVATARengineREST/rest/newevent";
EmbeddedWebServicePort = 6666;
